## Sistema de Apuracao de Eleicões para Vereadores

### 1\. Visao Geral

Este projeto e uma aplicacao em C++ destinada a processar dados de eleicões municipais para o cargo de vereador, com base nos arquivos CSV disponibilizados pelo TSE. O programa lê os dados de candidatos e de votacao, realiza a apuracao dos resultados e gera uma serie de relatórios estatisticos sobre a eleicao.

### 2\. Arquitetura do Projeto

1.  **Camada de Orquestracao (`main.cpp`)**:

      * Sua funcao e "orquestrar" o fluxo: inicializa os objetos das outras camadas e chama seus metodos na ordem correta.
      * Fluxo: Lê os argumentos da linha de comando -\> Chama a Camada de Leitura -\> Recebe os dados crus -\> Alimenta a Camada de Dominio -\> Chama a Camada de Apresentacao.

2.  **Camada de Entrada/Saida (`leitura.hpp`, `leitura.cpp`)**:

      * Responsavel por ler e analisar (fazer o *parsing*) dos arquivos CSV de candidatos e votacao.
      * Uma de suas funcões cruciais e **converter as strings lidas de ISO-8859-1 para UTF-8**, garantindo que o restante do sistema lide com uma codificacao padronizada.

3.  **Camada de Transferência de Dados (`tipos.hpp`)**:

      * Define `structs` simples (`DadosCandidato`, `DadosVoto`), que funcionam como **DTOs (Data Transfer Objects)**.
      * Essas `structs` sao o "contrato" entre a camada de leitura e a camada de dominio. A leitura popula esses objetos, e o dominio os consome para criar suas entidades.

4.  **Camada de Dominio (`candidato`, `partido`, `voto`, `eleicao`)**:

      * Contem as classes que representam os conceitos do mundo real (`Candidato`, `Partido`, etc.).
      * Toda a lógica de apuracao, contagem de votos, calculo de eleitos e associacões esta aqui.
      * **Importante**: Esta camada e totalmente isolada, nao sabe se os dados vêm de um CSV ou de um banco de dados.

5.  **Camada de Apresentacao (`relatorio.hpp`, `relatorio.cpp`)**:

      * Responsavel por pegar os dados processados da Camada de Dominio e formata-los para exibicao no console.
      * Implementa a formatacao de números para o padrao brasileiro (ex: `1.234,56`) usando `std::locale`.

### 3\. Como Compilar e Executar

O projeto utiliza um `Makefile` para automatizar a compilacao e execucao. Os comandos principais sao:

  * **Compilar o projeto:**

    ```sh
    make
    ```

    Este comando compila todos os fontes e gera o executavel `vereadores` na raiz do projeto.

  * **Executar o programa:**
    A execucao exige 4 argumentos de linha de comando: código do municipio, caminho do arquivo de candidatos, caminho do arquivo de votacao e a data da eleicao.

    ```sh
    # Exemplo de execucao direta
    ./vereadores 57053 candidatos.csv votacao.csv 06/10/2024
    ```

    O `Makefile` tambem oferece um atalho para execucao:

    ```sh
    # Exemplo usando o atalho do Makefile
    make run CDMUN=57053
    ```

  * **Limpar arquivos gerados:**
    Para remover o executavel e os arquivos-objeto (`.o`):

    ```sh
    make clean
    ```

### 4\. Estrutura de Módulos e Classes

  * `main.cpp`: Ponto de entrada e orquestrador da aplicacao
  * `leitura.hpp/.cpp`: Implementa a lógica de leitura dos arquivos CSV e conversao de codificacao
  * `tipos.hpp`: Define as `structs` `DadosCandidato` e `DadosVoto` para transferência de dados
  * `candidato.hpp/.cpp`: Modela um candidato, seus dados pessoais e seus votos nominais
  * `partido.hpp/.cpp`: Modela um partido politico, agregando seus candidatos e votos de legenda e nominais
  * `voto.hpp/.cpp`: Modela uma entrada de voto do arquivo de votacao (pode ser nominal ou de legenda)
  * `eleicao.hpp/.cpp`: Classe central da camada de dominio, que agrega todos os partidos e candidatos, e computa os totais da eleicao.
  * `relatorio.hpp/.cpp`: Classe estatica responsavel por gerar e imprimir todos os relatórios finais no console
  * `Makefile`: Script de compilacao e execucao do projeto
-----